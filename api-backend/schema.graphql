scalar GraphQLDate

type Product {
    id: ID!
    product_id: String!
    title: String
    category: String
    description: String
    rating: [Int!]
}

type ProductAddRating {
    product_id: String!
    rating: [Int]!
}

type Blog {
    title: String!
    content: String!
    createdAt: String
}

type BlogUpdate {
    postID: String!
    title: String!
    content: String!
}

type BlogDelete {
    postID: String!
}

type BlogList {
    postID: String!
    title: String!
    content: String!
    createdAt: GraphQLDate
    author: String!
}

type User {
    _id: ID!
    email: String!
    token: String!
    username: String!
}

type Admin {
    _id: ID!
    email: String!
    token: String!
}

type ProductCount {
    count: Int!
}

type UserCount {
    countUsers: Int!
}

type AdminCount {
    countAdmins: Int!
}

type Query {
    "Query used to return all Product objects in the database."
    getProducts: [Product]

    "Query used to count number of database objects -> returns an INT."
    countProducts: ProductCount!

    "Query used to count total number of registered users -> returns an INT."
    countAllUsers: UserCount!

    "Query used to count total number of admins -> returns an INT."
    countAllAdmins: AdminCount!

    "Query used to return all blog posts."
    returnAllPosts: [BlogList]

    "Query for user login."
    userLogin(email: String!, password: String!): User
    verifyTokenUser(token: String!): User

    "Query for admin login."
    adminLogin(email: String!, password: String!): Admin
    verifyTokenAdmin(token: String!): Admin

}

"""Inputs for updateProducts: title + category = not required, description = required."""
input ProductUpdateInputs {
    title: String
    category: String
    description: String!
}

"""Inputs for updating a blog post by user."""
input updatePostInput {
    title: String!
    content: String!
}

"""Inputs for creating a new user."""
input UserInput {
    email: String!
    password: String!
    username: String!
    confirm: String!
}

"""Inputs for creating a new admin."""
input AdminInput {
    email: String!
    password: String!
    username: String!
    confirm: String!
}

"""Inputs for creating user blog."""
input BlogInput {
    title: String!
    content: String!
}

"""Inputs for user rating."""
input RatingInput {
    rating: Int!
}

type Mutation {
    "Mutation used to add document entries into the database."
    addProducts(product_id: String!, title: String!, category: String!, description: String!, rating: [Int!]!): Product

    "Mutation used to update a document from the database based on product_id."
    updateProducts(product_id: String!, changes: ProductUpdateInputs!): Product!

    "Mutation used to update a user post from database based on username."
    updateUserPost(postID: String!, changes: updatePostInput!): BlogUpdate!

    "Mutation to add a new user into the system."
    createUser(userInput: UserInput): User

    "Mutation to add an admin into the system."
    createAdmin(adminInput: AdminInput): Admin

    "Mutation to add a blog post."
    createBlog(blogInput: BlogInput): Blog

    "Mutation to delete a user's post."
    deletePost(postID: String!): BlogDelete!

    "Mutation to add rating to a Product - using Product schema."
    addUserRating(product_id: String!, userRating: RatingInput!): ProductAddRating!
}